on: [push]
name: build

jobs:
  unittest:
    runs-on: windows-latest
    name: Build and run unittests
    strategy:
      matrix:
        config: [Debug, Release]
        toolset: [ClangCl, v141, v142]
    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Restore Boost cache
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: ${{env.BOOST_ROOT}}
        key: boost
    - name: Install Boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        if [ "$OS" == "Windows_NT" ]; then
          # fix up paths to be forward slashes consistently
          BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
        fi
        mkdir -p $BOOST_ROOT
        curl --progress-bar --location --output $BOOST_ROOT/download.tar.bz2 $BOOST_URL
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar.bz2 -y -bd
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar -y -bd
        cd $BOOST_ROOT && cp -r boost_*/* .
        rm -rf boost_*/* download.tar.bz2 download.tar
      shell: bash
    - name: Install packages
      run: cinst openssl
    - name: Configure
      env:
        TOOLSET: ${{ matrix.toolset }}
      shell: bash
      run: cmake -B build -DBOOST_ROOT="${BOOST_ROOT_1_72_0}" -T $TOOLSET -DENABLE_DOCUMENTATION=OFF
    - name: Build
      env:
        CONFIG: ${{ matrix.config }}
      shell: bash
      run: cmake --build build/ --config $CONFIG
    - name: Run tests
      env:
        CONFIG: ${{ matrix.config }}
      shell: bash
      run: ctest -C $CONFIG --output-on-failure
      working-directory: build/

  codecoverage:
    runs-on: windows-latest
    name: Generate and upload code coverage
    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Restore Boost cache
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: ${{env.BOOST_ROOT}}
        key: boost
    - name: Install Boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        if [ "$OS" == "Windows_NT" ]; then
          # fix up paths to be forward slashes consistently
          BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
        fi
        mkdir -p $BOOST_ROOT
        curl --progress-bar --location --output $BOOST_ROOT/download.tar.bz2 $BOOST_URL
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar.bz2 -y -bd
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar -y -bd
        cd $BOOST_ROOT && cp -r boost_*/* .
        rm -rf boost_*/* download.tar.bz2 download.tar
      shell: bash
    - name: Install packages
      run: cinst openssl opencppcoverage codecov
    - name: Configure
      shell: bash
      run: cmake -B build -DBOOST_ROOT="${BOOST_ROOT_1_72_0}" -DENABLE_DOCUMENTATION=OFF
    - name: Build
      run: cmake --build build/ --target unittest
    - name: Generate code coverage
      shell: bash
      run: exec "${PROGRAMFILES}"/opencppcoverage/opencppcoverage --cover_children --sources="${GITHUB_WORKSPACE}"\\include --modules=unittest.exe --export_type=cobertura:cobertura.xml -- ctest
      working-directory: build/
    - name: Upload code coverage
      run: codecov --no-color -f build/cobertura.xml

  generate_documentation:
    runs-on: ubuntu-latest
    name: Generate and publish HTML documentation to Github Pages
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install APT packages
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get -yq install doxygen libboost-dev libssl-dev python3-pip
    - name: Install PIP packages
      # TODO: Consider using requirements.txt to ensure specific versions are used
      run: sudo pip3 install sphinx breathe sphinxcontrib-fulltoc
    - name: Configure build system
      run: mkdir build && cmake -Bbuild -H.
    - name: Build documentation
      run: cmake --build build/ --target sphinx
    - name: Disable Jekyll templating
      run: touch build/doc/sphinx/.nojekyll
    - name: Deploy
      if: github.ref == 'refs/heads/master'
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: build/doc/sphinx
        CLEAN: true
